// Copyright (c) 2021 Kaplas
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
namespace TF3.Tests.Yakuza
{
    using System;
    using System.IO;
    using NUnit.Framework;
    using TF3.YarhlPlugin.YakuzaCommon.Converters.Par;
    using TF3.YarhlPlugin.YakuzaCommon.Formats;
    using TF3.YarhlPlugin.YakuzaCommon.Types;
    using Yarhl.FileSystem;
    using Yarhl.IO;

    [TestFixture]
    public class ParTests
    {
        private readonly byte[] _data =
        {
            0x50, 0x41, 0x52, 0x43, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0x00,
            0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x64, 0x69, 0x72, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x64, 0x69, 0x72, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x74, 0x65, 0x73, 0x74, 0x31, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x74, 0x65, 0x73, 0x74, 0x32, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x74, 0x65, 0x73, 0x74, 0x33, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xB3, 0x00, 0x00, 0x02, 0x21, 0x00, 0x00, 0x08, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x69, 0xE3, 0xB5,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xDB, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x0A, 0x21,
            0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x69, 0xE7, 0xF0,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEF, 0x00, 0x00, 0x01, 0xB2, 0x00, 0x00, 0x0C, 0x61,
            0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x69, 0xE8, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x01, 0x10, 0x00, 0xB3, 0x02, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00,
            0x00, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x00, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64, 0x6F,
            0x6C, 0x00, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x00, 0x6D, 0x65, 0x74, 0x2C, 0x20,
            0x63, 0x6F, 0x6E, 0x00, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x00, 0x20, 0x61, 0x64,
            0x69, 0x70, 0x69, 0x73, 0x63, 0x00, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x00, 0x2E,
            0x20, 0x55, 0x74, 0x20, 0x66, 0x65, 0x72, 0x10, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x03, 0x6F, 0x72,
            0x63, 0x08, 0x69, 0x20, 0x65, 0x72, 0x61, 0x40, 0x03, 0x76, 0x65, 0x81, 0x6C, 0x30, 0x00, 0x68,
            0x69, 0x63, 0x75, 0x6C, 0x61, 0x81, 0xC1, 0x00, 0xD0, 0x04, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
            0x00, 0x51, 0x04, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D, 0x2E, 0x00, 0x20, 0x56, 0x65, 0x73, 0x74,
            0x69, 0x62, 0x75, 0x84, 0x6C, 0xA0, 0x03, 0x61, 0x6E, 0x74, 0x65, 0xF4, 0x07, 0x70, 0x00, 0x72,
            0x69, 0x6D, 0x69, 0x73, 0x20, 0x69, 0x6E, 0x0A, 0x20, 0x66, 0x61, 0x75, 0x63, 0xF0, 0x01, 0x73,
            0x83, 0x05, 0x10, 0x6C, 0x75, 0x63, 0x74, 0xB0, 0x00, 0x65, 0x74, 0x20, 0x00, 0x75, 0x6C, 0x74,
            0x72, 0x69, 0x63, 0x65, 0x73, 0x00, 0x20, 0x70, 0x6F, 0x73, 0x75, 0x65, 0x72, 0x65, 0x01, 0x20,
            0x63, 0x75, 0x62, 0x69, 0x6C, 0x69, 0x61, 0x00, 0x70, 0x00, 0x72, 0x61, 0x65, 0x3B, 0x20, 0x4E,
            0x75, 0x11, 0x6C, 0x6C, 0x61, 0x6D, 0x26, 0x0C, 0x20, 0x64, 0x69, 0x83, 0xD0, 0x00, 0x41, 0x00,
            0x2E, 0x20, 0x50, 0x72, 0x6F, 0x80, 0x05, 0x02, 0xD1, 0x09, 0x6C, 0x6F, 0x62, 0x6F, 0x72, 0x74,
            0x80, 0x06, 0x04, 0x74, 0x65, 0x6C, 0x6C, 0x75, 0x73, 0xA7, 0x01, 0x6E, 0x20, 0x65, 0x6E, 0x61,
            0x71, 0x01, 0x61, 0x63, 0x20, 0x73, 0x00, 0x61, 0x70, 0x69, 0x65, 0x6E, 0x20, 0x6E, 0x6F, 0x44,
            0x6E, 0x20, 0xA0, 0x08, 0x74, 0x6F, 0x72, 0x55, 0x02, 0x6D, 0x18, 0x61, 0x73, 0x73, 0x61, 0x20,
            0x04, 0x50, 0x13, 0x2C, 0x20, 0x0B, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x10, 0x06, 0x61, 0xE0, 0x06,
            0x22, 0x61, 0x0C, 0x65, 0x67, 0x61, 0x13, 0x66, 0x61, 0x63, 0x30, 0x09, 0x82, 0x73, 0x80, 0x04,
            0x66, 0x65, 0x75, 0x67, 0x69, 0xC0, 0x01, 0x56, 0x65, 0x78, 0xE5, 0x03, 0x61, 0x13, 0x0D, 0x61,
            0x20, 0x01, 0x70, 0x14, 0x00, 0x65, 0x69, 0x66, 0x65, 0x6E, 0x64, 0x20, 0x70, 0x04, 0x75, 0x6C,
            0x76, 0x69, 0x6E, 0x61, 0x30, 0x06, 0x4D, 0x2E, 0x61, 0x65, 0x63, 0x40, 0x08, 0x73, 0xAA, 0x17,
            0xB9, 0x00, 0x82, 0x12, 0x00, 0x2E, 0x20, 0x44, 0x6F, 0x6E, 0x65, 0x63, 0x20, 0x00, 0x65, 0x75,
            0x69, 0x73, 0x6D, 0x6F, 0x64, 0x20, 0xEA, 0x64, 0xC0, 0x0A, 0xC1, 0x12, 0xB2, 0x08, 0x70, 0xB0,
            0x0D, 0x61, 0x95, 0x09, 0x32, 0x2E, 0x20, 0x41, 0x24, 0x0A, 0x40, 0x04, 0x67, 0x75, 0xF0, 0x12,
            0x58, 0x6F, 0x6D, 0x10, 0x03, 0x6F, 0x95, 0x09, 0x60, 0x09, 0x68, 0x61, 0xC0, 0x73, 0x62, 0x10,
            0xB4, 0x19, 0x20, 0x75, 0x72, 0x6E, 0x61, 0x00, 0x20, 0x74, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75,
            0xC6, 0x6E, 0xD0, 0x0C, 0x64, 0x01, 0x70, 0x75, 0x72, 0x21, 0x18, 0x02, 0x0E, 0x00, 0x6D, 0x61,
            0x6C, 0x65, 0x73, 0x75, 0x61, 0x64, 0x3C, 0x61, 0x20, 0x6E, 0x60, 0x0E, 0x39, 0x04, 0x10, 0x0E,
            0xF2, 0x03, 0x6E, 0x05, 0x69, 0x62, 0x68, 0x2E, 0x20, 0x51, 0xF0, 0x09, 0x71, 0xFC, 0x40, 0x07,
            0x10, 0x10, 0x10, 0x14, 0x20, 0x00, 0x91, 0x15, 0x22, 0x19, 0x44, 0x05, 0x6D, 0x1F, 0x61, 0x78,
            0x69, 0x6D, 0x64, 0x05, 0x47, 0x1B, 0xF3, 0x25, 0x85, 0x0B, 0xC0, 0x00, 0x01, 0xD6, 0x20, 0xD3,
            0x0F, 0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x01, 0x10, 0x00, 0xDB, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00,
            0x00, 0x00, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x00, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64,
            0x6F, 0x6C, 0x00, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x00, 0x6D, 0x65, 0x74, 0x2C,
            0x20, 0x63, 0x6F, 0x6E, 0x00, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x00, 0x20, 0x61,
            0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x00, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x00,
            0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20, 0x00, 0x72, 0x68, 0x6F, 0x6E, 0x63, 0x75, 0x73,
            0x20, 0x03, 0x64, 0x75, 0x69, 0x20, 0x61, 0x20, 0x6C, 0xD0, 0x02, 0x00, 0xC0, 0x00, 0x66, 0x65,
            0x75, 0x67, 0x69, 0x61, 0x74, 0x00, 0x20, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D, 0x2E, 0x13, 0x20,
            0x4E, 0x61, 0x6D, 0xB4, 0x00, 0x20, 0x76, 0xC1, 0x03, 0x02, 0x90, 0x02, 0x70, 0x6C, 0x61, 0x63,
            0x65, 0x72, 0x30, 0x02, 0x00, 0x74, 0x72, 0x69, 0x73, 0x74, 0x69, 0x71, 0x75, 0x80, 0x65, 0x60,
            0x02, 0x75, 0x6C, 0x6C, 0x61, 0x20, 0x74, 0x00, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75, 0x6E, 0x74,
            0x00, 0x20, 0x6E, 0x69, 0x73, 0x69, 0x20, 0x65, 0x75, 0x08, 0x20, 0x65, 0x72, 0x6F, 0x73, 0x80,
            0x03, 0x6E, 0x65, 0x00, 0x6E, 0x61, 0x74, 0x69, 0x73, 0x2C, 0x20, 0x65, 0x00, 0x67, 0x65, 0x74,
            0x20, 0x69, 0x6D, 0x70, 0x65, 0x30, 0x72, 0x64, 0x69, 0x90, 0x00, 0x44, 0x07, 0x67, 0x72, 0x61,
            0x01, 0x76, 0x69, 0x64, 0x61, 0x2E, 0x20, 0x56, 0x65, 0x10, 0x00, 0x05, 0x62, 0x75, 0x6C, 0xD0,
            0x06, 0x73, 0x65, 0x64, 0x00, 0x20, 0x73, 0x6F, 0x6C, 0x6C, 0x69, 0x63, 0x69, 0x34, 0x74, 0x75,
            0x64, 0xE0, 0x0A, 0x50, 0x07, 0x75, 0x10, 0x04, 0x6E, 0x08, 0x6F, 0x6E, 0x20, 0x75, 0x6C, 0xA0,
            0x07, 0x63, 0x69, 0x43, 0x65, 0x73, 0x43, 0x01, 0x2E, 0x20, 0x41, 0x6C, 0x60, 0x08, 0xC9, 0x90,
            0x0A, 0x20, 0x0A, 0xA0, 0x07, 0x62, 0x68, 0x60, 0x0C, 0x6C, 0x69, 0x05, 0x70, 0x01, 0x43, 0x75,
            0x72, 0x61, 0x62, 0xF0, 0x03, 0x72, 0x00, 0x81, 0x02, 0x69, 0x6E, 0x69, 0x61, 0x20, 0x6D, 0x61,
            0x1C, 0x67, 0x6E, 0x61, 0x20, 0x80, 0x0B, 0xB1, 0x04, 0x00, 0x0A, 0x73, 0x18, 0x61, 0x67, 0x69,
            0x74, 0xA0, 0x09, 0x11, 0x0B, 0x6C, 0x20, 0x00, 0x76, 0x69, 0x76, 0x65, 0x72, 0x72, 0x61, 0x20,
            0x40, 0x71, 0x75, 0xD1, 0x03, 0x46, 0x75, 0x73, 0x63, 0x65, 0x0B, 0x20, 0x61, 0x75, 0x63, 0x74,
            0xA0, 0x15, 0x6C, 0x60, 0x00, 0x07, 0xA0, 0x0A, 0x61, 0x75, 0x67, 0x75, 0x65, 0x05, 0x0B, 0x25,
            0x14, 0xE1, 0xF4, 0x0F, 0x41, 0x0B, 0xA1, 0x0D, 0xC4, 0x18, 0x6E, 0x65, 0x63, 0x20, 0xCB, 0xB0,
            0x18, 0x40, 0x03, 0xC0, 0x18, 0x76, 0x61, 0xA0, 0x0C, 0x73, 0x66, 0x15, 0xC5, 0xA3, 0x05, 0xB1,
            0x0C, 0x55, 0x18, 0x61, 0x6E, 0x74, 0x70, 0x14, 0x44, 0x9E, 0x80, 0x07, 0x6C, 0x0F, 0x69, 0x62,
            0x40, 0x14, 0x12, 0x09, 0x10, 0x05, 0xC0, 0x16, 0x04, 0x20, 0x6C, 0x6F, 0x62, 0x6F, 0x72, 0x21,
            0x0B, 0x6F, 0x1B, 0x72, 0x6E, 0x61, 0x72, 0x40, 0x03, 0xC7, 0x04, 0x74, 0xF0, 0x07, 0xC0, 0xB0,
            0x04, 0x54, 0x11, 0x44, 0x09, 0x76, 0x69, 0x74, 0x61, 0x65, 0x07, 0x20, 0x70, 0x72, 0x65, 0x74,
            0x69, 0x70, 0x15, 0x12, 0x09, 0xF8, 0x73, 0x1D, 0x00, 0x18, 0x75, 0x1A, 0x84, 0x18, 0x52, 0x23,
            0x90, 0x14, 0x74, 0x20, 0x28, 0x65, 0x66, 0x66, 0x22, 0x08, 0x72, 0x40, 0x19, 0x69, 0x76, 0x49,
            0x61, 0x6D, 0xC0, 0x01, 0x69, 0x64, 0xD0, 0x13, 0x78, 0x69, 0x09, 0xA1, 0x00, 0x6F, 0x64, 0x69,
            0x6F, 0xF1, 0x05, 0x6E, 0x63, 0x8C, 0x33, 0x0C, 0x03, 0x22, 0x6C, 0x65, 0x6F, 0x82, 0x27, 0xB4,
            0x0E, 0x64, 0xF9, 0x69, 0x30, 0x05, 0x94, 0x29, 0x57, 0x04, 0x06, 0x17, 0x30, 0x0B, 0x6C, 0x65,
            0xE2, 0x80, 0x18, 0x21, 0x0D, 0xC2, 0x1B, 0xF1, 0x12, 0x64, 0x61, 0x70, 0xF0, 0x1F, 0x00, 0x73,
            0x2E, 0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x01, 0x10, 0x00, 0xEF, 0x01, 0x00, 0x00, 0xB2, 0x01, 0x00,
            0x00, 0x00, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x00, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64,
            0x6F, 0x6C, 0x00, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x00, 0x6D, 0x65, 0x74, 0x2C,
            0x20, 0x63, 0x6F, 0x6E, 0x00, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x00, 0x20, 0x61,
            0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x00, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x01,
            0x2E, 0x20, 0x43, 0x75, 0x72, 0x61, 0x62, 0x69, 0x10, 0xA1, 0x01, 0x73, 0x65, 0x64, 0x30, 0x00,
            0x6D, 0x20, 0x68, 0x02, 0x65, 0x6E, 0x64, 0x72, 0x65, 0x72, 0x69, 0x90, 0x03, 0x01, 0x6C, 0x75,
            0x63, 0x74, 0x75, 0x73, 0x20, 0x66, 0x08, 0xA0, 0x02, 0x73, 0x20, 0x65, 0x75, 0x06, 0x01, 0x65,
            0x6E, 0x08, 0x69, 0x6D, 0x2E, 0x20, 0x53, 0x00, 0x03, 0x6E, 0x6F, 0x04, 0x6E, 0x20, 0x74, 0x65,
            0x6C, 0x6C, 0x40, 0x01, 0x61, 0x0C, 0x20, 0x6D, 0x61, 0x75, 0x72, 0x80, 0x02, 0xF0, 0x06, 0x64,
            0x08, 0x69, 0x6D, 0x65, 0x6E, 0x74, 0xB0, 0x08, 0x69, 0x6E, 0x12, 0x74, 0x65, 0x72, 0x64, 0x80,
            0x00, 0x71, 0x75, 0x90, 0x01, 0x01, 0x6E, 0x65, 0x63, 0x20, 0x6F, 0x64, 0x69, 0x6F, 0x20, 0x60,
            0x07, 0x72, 0x61, 0x11, 0x03, 0x75, 0x6C, 0x74, 0x72, 0x00, 0x69, 0x63, 0x65, 0x73, 0x20, 0x75,
            0x72, 0x6E, 0x00, 0x61, 0x2E, 0x20, 0x56, 0x65, 0x73, 0x74, 0x69, 0x22, 0x62, 0x75, 0x6C, 0x81,
            0x03, 0x61, 0x63, 0x75, 0x51, 0x07, 0x20, 0x62, 0x6C, 0x61, 0xD0, 0x04, 0x74, 0x20, 0x76, 0x65,
            0x6C, 0x68, 0x69, 0x10, 0x01, 0x40, 0x02, 0x50, 0xE0, 0x06, 0xC0, 0x05, 0x65, 0x00, 0x73, 0x71,
            0x75, 0x65, 0x20, 0x65, 0x67, 0x65, 0x0C, 0x74, 0x20, 0x65, 0x72, 0x6F, 0xB0, 0x05, 0x90, 0x08,
            0x6E, 0x01, 0x69, 0x73, 0x69, 0x20, 0x73, 0x63, 0x65, 0x6C, 0x8D, 0xE0, 0x0B, 0xE2, 0x01, 0x62,
            0x69, 0x62, 0xD0, 0x0C, 0xE0, 0x04, 0x76, 0x05, 0x97, 0x05, 0x76, 0x69, 0x74, 0x61, 0x65, 0xB0,
            0x0A, 0x67, 0x08, 0x11, 0x07, 0x4E, 0x75, 0x6E, 0x63, 0xA6, 0x12, 0x20, 0x74, 0x01, 0x69, 0x6E,
            0x63, 0x69, 0x64, 0x75, 0x6E, 0x74, 0x28, 0x90, 0x04, 0x62, 0x68, 0xFA, 0x08, 0x65, 0xF0, 0x0B,
            0x6D, 0x6F, 0x88, 0x64, 0x70, 0x03, 0x78, 0x69, 0x6D, 0xD0, 0x0E, 0x67, 0x72, 0x18, 0x61, 0x76,
            0x69, 0x64, 0x10, 0x04, 0x51, 0x10, 0x61, 0x20, 0xBC, 0x61, 0x00, 0x09, 0x20, 0xB0, 0x0C, 0xF0,
            0x02, 0x71, 0x07, 0x94, 0x10, 0x61, 0x80, 0x6C, 0xD0, 0x00, 0x61, 0x6D, 0x20, 0x66, 0x61, 0x63,
            0xE2, 0x69, 0xC0, 0x0C, 0x11, 0x10, 0x50, 0x0A, 0x76, 0x65, 0x6C, 0xC4, 0x17, 0x10, 0x53, 0x75,
            0x73, 0x70, 0xF0, 0x09, 0x69, 0x73, 0x73, 0x21, 0x65, 0x20, 0x69, 0xD0, 0x17, 0x61, 0x70, 0x69,
            0x65, 0xE2, 0xF0, 0x01, 0x02, 0x0A, 0x54, 0x15, 0xC9, 0x1B, 0x64, 0x69, 0x67, 0x10, 0x0E, 0x80,
            0x73, 0xB0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        private readonly byte[] _dataLittleEndian =
        {
            0x50, 0x41, 0x52, 0x43, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x00, 0xA0, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x64, 0x69, 0x72, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x64, 0x69, 0x72, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x74, 0x65, 0x73, 0x74, 0x31, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x74, 0x65, 0x73, 0x74, 0x32, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x74, 0x65, 0x73, 0x74, 0x33, 0x2E, 0x74, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0xB3, 0x02, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0xE3, 0x69, 0x60, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0xDB, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x21, 0x0A, 0x00, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE7, 0x69, 0x60, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0xEF, 0x01, 0x00, 0x00, 0xB2, 0x01, 0x00, 0x00, 0x61, 0x0C, 0x00, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE8, 0x69, 0x60, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x01, 0x10, 0x00, 0xB3, 0x02, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00,
            0x00, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x00, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64, 0x6F,
            0x6C, 0x00, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x00, 0x6D, 0x65, 0x74, 0x2C, 0x20,
            0x63, 0x6F, 0x6E, 0x00, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x00, 0x20, 0x61, 0x64,
            0x69, 0x70, 0x69, 0x73, 0x63, 0x00, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x00, 0x2E,
            0x20, 0x55, 0x74, 0x20, 0x66, 0x65, 0x72, 0x10, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x03, 0x6F, 0x72,
            0x63, 0x08, 0x69, 0x20, 0x65, 0x72, 0x61, 0x40, 0x03, 0x76, 0x65, 0x81, 0x6C, 0x30, 0x00, 0x68,
            0x69, 0x63, 0x75, 0x6C, 0x61, 0x81, 0xC1, 0x00, 0xD0, 0x04, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
            0x00, 0x51, 0x04, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D, 0x2E, 0x00, 0x20, 0x56, 0x65, 0x73, 0x74,
            0x69, 0x62, 0x75, 0x84, 0x6C, 0xA0, 0x03, 0x61, 0x6E, 0x74, 0x65, 0xF4, 0x07, 0x70, 0x00, 0x72,
            0x69, 0x6D, 0x69, 0x73, 0x20, 0x69, 0x6E, 0x0A, 0x20, 0x66, 0x61, 0x75, 0x63, 0xF0, 0x01, 0x73,
            0x83, 0x05, 0x10, 0x6C, 0x75, 0x63, 0x74, 0xB0, 0x00, 0x65, 0x74, 0x20, 0x00, 0x75, 0x6C, 0x74,
            0x72, 0x69, 0x63, 0x65, 0x73, 0x00, 0x20, 0x70, 0x6F, 0x73, 0x75, 0x65, 0x72, 0x65, 0x01, 0x20,
            0x63, 0x75, 0x62, 0x69, 0x6C, 0x69, 0x61, 0x00, 0x70, 0x00, 0x72, 0x61, 0x65, 0x3B, 0x20, 0x4E,
            0x75, 0x11, 0x6C, 0x6C, 0x61, 0x6D, 0x26, 0x0C, 0x20, 0x64, 0x69, 0x83, 0xD0, 0x00, 0x41, 0x00,
            0x2E, 0x20, 0x50, 0x72, 0x6F, 0x80, 0x05, 0x02, 0xD1, 0x09, 0x6C, 0x6F, 0x62, 0x6F, 0x72, 0x74,
            0x80, 0x06, 0x04, 0x74, 0x65, 0x6C, 0x6C, 0x75, 0x73, 0xA7, 0x01, 0x6E, 0x20, 0x65, 0x6E, 0x61,
            0x71, 0x01, 0x61, 0x63, 0x20, 0x73, 0x00, 0x61, 0x70, 0x69, 0x65, 0x6E, 0x20, 0x6E, 0x6F, 0x44,
            0x6E, 0x20, 0xA0, 0x08, 0x74, 0x6F, 0x72, 0x55, 0x02, 0x6D, 0x18, 0x61, 0x73, 0x73, 0x61, 0x20,
            0x04, 0x50, 0x13, 0x2C, 0x20, 0x0B, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x10, 0x06, 0x61, 0xE0, 0x06,
            0x22, 0x61, 0x0C, 0x65, 0x67, 0x61, 0x13, 0x66, 0x61, 0x63, 0x30, 0x09, 0x82, 0x73, 0x80, 0x04,
            0x66, 0x65, 0x75, 0x67, 0x69, 0xC0, 0x01, 0x56, 0x65, 0x78, 0xE5, 0x03, 0x61, 0x13, 0x0D, 0x61,
            0x20, 0x01, 0x70, 0x14, 0x00, 0x65, 0x69, 0x66, 0x65, 0x6E, 0x64, 0x20, 0x70, 0x04, 0x75, 0x6C,
            0x76, 0x69, 0x6E, 0x61, 0x30, 0x06, 0x4D, 0x2E, 0x61, 0x65, 0x63, 0x40, 0x08, 0x73, 0xAA, 0x17,
            0xB9, 0x00, 0x82, 0x12, 0x00, 0x2E, 0x20, 0x44, 0x6F, 0x6E, 0x65, 0x63, 0x20, 0x00, 0x65, 0x75,
            0x69, 0x73, 0x6D, 0x6F, 0x64, 0x20, 0xEA, 0x64, 0xC0, 0x0A, 0xC1, 0x12, 0xB2, 0x08, 0x70, 0xB0,
            0x0D, 0x61, 0x95, 0x09, 0x32, 0x2E, 0x20, 0x41, 0x24, 0x0A, 0x40, 0x04, 0x67, 0x75, 0xF0, 0x12,
            0x58, 0x6F, 0x6D, 0x10, 0x03, 0x6F, 0x95, 0x09, 0x60, 0x09, 0x68, 0x61, 0xC0, 0x73, 0x62, 0x10,
            0xB4, 0x19, 0x20, 0x75, 0x72, 0x6E, 0x61, 0x00, 0x20, 0x74, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75,
            0xC6, 0x6E, 0xD0, 0x0C, 0x64, 0x01, 0x70, 0x75, 0x72, 0x21, 0x18, 0x02, 0x0E, 0x00, 0x6D, 0x61,
            0x6C, 0x65, 0x73, 0x75, 0x61, 0x64, 0x3C, 0x61, 0x20, 0x6E, 0x60, 0x0E, 0x39, 0x04, 0x10, 0x0E,
            0xF2, 0x03, 0x6E, 0x05, 0x69, 0x62, 0x68, 0x2E, 0x20, 0x51, 0xF0, 0x09, 0x71, 0xFC, 0x40, 0x07,
            0x10, 0x10, 0x10, 0x14, 0x20, 0x00, 0x91, 0x15, 0x22, 0x19, 0x44, 0x05, 0x6D, 0x1F, 0x61, 0x78,
            0x69, 0x6D, 0x64, 0x05, 0x47, 0x1B, 0xF3, 0x25, 0x85, 0x0B, 0xC0, 0x00, 0x01, 0xD6, 0x20, 0xD3,
            0x0F, 0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x01, 0x10, 0x00, 0xDB, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00,
            0x00, 0x00, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x00, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64,
            0x6F, 0x6C, 0x00, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x00, 0x6D, 0x65, 0x74, 0x2C,
            0x20, 0x63, 0x6F, 0x6E, 0x00, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x00, 0x20, 0x61,
            0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x00, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x00,
            0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20, 0x00, 0x72, 0x68, 0x6F, 0x6E, 0x63, 0x75, 0x73,
            0x20, 0x03, 0x64, 0x75, 0x69, 0x20, 0x61, 0x20, 0x6C, 0xD0, 0x02, 0x00, 0xC0, 0x00, 0x66, 0x65,
            0x75, 0x67, 0x69, 0x61, 0x74, 0x00, 0x20, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D, 0x2E, 0x13, 0x20,
            0x4E, 0x61, 0x6D, 0xB4, 0x00, 0x20, 0x76, 0xC1, 0x03, 0x02, 0x90, 0x02, 0x70, 0x6C, 0x61, 0x63,
            0x65, 0x72, 0x30, 0x02, 0x00, 0x74, 0x72, 0x69, 0x73, 0x74, 0x69, 0x71, 0x75, 0x80, 0x65, 0x60,
            0x02, 0x75, 0x6C, 0x6C, 0x61, 0x20, 0x74, 0x00, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75, 0x6E, 0x74,
            0x00, 0x20, 0x6E, 0x69, 0x73, 0x69, 0x20, 0x65, 0x75, 0x08, 0x20, 0x65, 0x72, 0x6F, 0x73, 0x80,
            0x03, 0x6E, 0x65, 0x00, 0x6E, 0x61, 0x74, 0x69, 0x73, 0x2C, 0x20, 0x65, 0x00, 0x67, 0x65, 0x74,
            0x20, 0x69, 0x6D, 0x70, 0x65, 0x30, 0x72, 0x64, 0x69, 0x90, 0x00, 0x44, 0x07, 0x67, 0x72, 0x61,
            0x01, 0x76, 0x69, 0x64, 0x61, 0x2E, 0x20, 0x56, 0x65, 0x10, 0x00, 0x05, 0x62, 0x75, 0x6C, 0xD0,
            0x06, 0x73, 0x65, 0x64, 0x00, 0x20, 0x73, 0x6F, 0x6C, 0x6C, 0x69, 0x63, 0x69, 0x34, 0x74, 0x75,
            0x64, 0xE0, 0x0A, 0x50, 0x07, 0x75, 0x10, 0x04, 0x6E, 0x08, 0x6F, 0x6E, 0x20, 0x75, 0x6C, 0xA0,
            0x07, 0x63, 0x69, 0x43, 0x65, 0x73, 0x43, 0x01, 0x2E, 0x20, 0x41, 0x6C, 0x60, 0x08, 0xC9, 0x90,
            0x0A, 0x20, 0x0A, 0xA0, 0x07, 0x62, 0x68, 0x60, 0x0C, 0x6C, 0x69, 0x05, 0x70, 0x01, 0x43, 0x75,
            0x72, 0x61, 0x62, 0xF0, 0x03, 0x72, 0x00, 0x81, 0x02, 0x69, 0x6E, 0x69, 0x61, 0x20, 0x6D, 0x61,
            0x1C, 0x67, 0x6E, 0x61, 0x20, 0x80, 0x0B, 0xB1, 0x04, 0x00, 0x0A, 0x73, 0x18, 0x61, 0x67, 0x69,
            0x74, 0xA0, 0x09, 0x11, 0x0B, 0x6C, 0x20, 0x00, 0x76, 0x69, 0x76, 0x65, 0x72, 0x72, 0x61, 0x20,
            0x40, 0x71, 0x75, 0xD1, 0x03, 0x46, 0x75, 0x73, 0x63, 0x65, 0x0B, 0x20, 0x61, 0x75, 0x63, 0x74,
            0xA0, 0x15, 0x6C, 0x60, 0x00, 0x07, 0xA0, 0x0A, 0x61, 0x75, 0x67, 0x75, 0x65, 0x05, 0x0B, 0x25,
            0x14, 0xE1, 0xF4, 0x0F, 0x41, 0x0B, 0xA1, 0x0D, 0xC4, 0x18, 0x6E, 0x65, 0x63, 0x20, 0xCB, 0xB0,
            0x18, 0x40, 0x03, 0xC0, 0x18, 0x76, 0x61, 0xA0, 0x0C, 0x73, 0x66, 0x15, 0xC5, 0xA3, 0x05, 0xB1,
            0x0C, 0x55, 0x18, 0x61, 0x6E, 0x74, 0x70, 0x14, 0x44, 0x9E, 0x80, 0x07, 0x6C, 0x0F, 0x69, 0x62,
            0x40, 0x14, 0x12, 0x09, 0x10, 0x05, 0xC0, 0x16, 0x04, 0x20, 0x6C, 0x6F, 0x62, 0x6F, 0x72, 0x21,
            0x0B, 0x6F, 0x1B, 0x72, 0x6E, 0x61, 0x72, 0x40, 0x03, 0xC7, 0x04, 0x74, 0xF0, 0x07, 0xC0, 0xB0,
            0x04, 0x54, 0x11, 0x44, 0x09, 0x76, 0x69, 0x74, 0x61, 0x65, 0x07, 0x20, 0x70, 0x72, 0x65, 0x74,
            0x69, 0x70, 0x15, 0x12, 0x09, 0xF8, 0x73, 0x1D, 0x00, 0x18, 0x75, 0x1A, 0x84, 0x18, 0x52, 0x23,
            0x90, 0x14, 0x74, 0x20, 0x28, 0x65, 0x66, 0x66, 0x22, 0x08, 0x72, 0x40, 0x19, 0x69, 0x76, 0x49,
            0x61, 0x6D, 0xC0, 0x01, 0x69, 0x64, 0xD0, 0x13, 0x78, 0x69, 0x09, 0xA1, 0x00, 0x6F, 0x64, 0x69,
            0x6F, 0xF1, 0x05, 0x6E, 0x63, 0x8C, 0x33, 0x0C, 0x03, 0x22, 0x6C, 0x65, 0x6F, 0x82, 0x27, 0xB4,
            0x0E, 0x64, 0xF9, 0x69, 0x30, 0x05, 0x94, 0x29, 0x57, 0x04, 0x06, 0x17, 0x30, 0x0B, 0x6C, 0x65,
            0xE2, 0x80, 0x18, 0x21, 0x0D, 0xC2, 0x1B, 0xF1, 0x12, 0x64, 0x61, 0x70, 0xF0, 0x1F, 0x00, 0x73,
            0x2E, 0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x01, 0x10, 0x00, 0xEF, 0x01, 0x00, 0x00, 0xB2, 0x01, 0x00,
            0x00, 0x00, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x00, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64,
            0x6F, 0x6C, 0x00, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x00, 0x6D, 0x65, 0x74, 0x2C,
            0x20, 0x63, 0x6F, 0x6E, 0x00, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x00, 0x20, 0x61,
            0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x00, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x01,
            0x2E, 0x20, 0x43, 0x75, 0x72, 0x61, 0x62, 0x69, 0x10, 0xA1, 0x01, 0x73, 0x65, 0x64, 0x30, 0x00,
            0x6D, 0x20, 0x68, 0x02, 0x65, 0x6E, 0x64, 0x72, 0x65, 0x72, 0x69, 0x90, 0x03, 0x01, 0x6C, 0x75,
            0x63, 0x74, 0x75, 0x73, 0x20, 0x66, 0x08, 0xA0, 0x02, 0x73, 0x20, 0x65, 0x75, 0x06, 0x01, 0x65,
            0x6E, 0x08, 0x69, 0x6D, 0x2E, 0x20, 0x53, 0x00, 0x03, 0x6E, 0x6F, 0x04, 0x6E, 0x20, 0x74, 0x65,
            0x6C, 0x6C, 0x40, 0x01, 0x61, 0x0C, 0x20, 0x6D, 0x61, 0x75, 0x72, 0x80, 0x02, 0xF0, 0x06, 0x64,
            0x08, 0x69, 0x6D, 0x65, 0x6E, 0x74, 0xB0, 0x08, 0x69, 0x6E, 0x12, 0x74, 0x65, 0x72, 0x64, 0x80,
            0x00, 0x71, 0x75, 0x90, 0x01, 0x01, 0x6E, 0x65, 0x63, 0x20, 0x6F, 0x64, 0x69, 0x6F, 0x20, 0x60,
            0x07, 0x72, 0x61, 0x11, 0x03, 0x75, 0x6C, 0x74, 0x72, 0x00, 0x69, 0x63, 0x65, 0x73, 0x20, 0x75,
            0x72, 0x6E, 0x00, 0x61, 0x2E, 0x20, 0x56, 0x65, 0x73, 0x74, 0x69, 0x22, 0x62, 0x75, 0x6C, 0x81,
            0x03, 0x61, 0x63, 0x75, 0x51, 0x07, 0x20, 0x62, 0x6C, 0x61, 0xD0, 0x04, 0x74, 0x20, 0x76, 0x65,
            0x6C, 0x68, 0x69, 0x10, 0x01, 0x40, 0x02, 0x50, 0xE0, 0x06, 0xC0, 0x05, 0x65, 0x00, 0x73, 0x71,
            0x75, 0x65, 0x20, 0x65, 0x67, 0x65, 0x0C, 0x74, 0x20, 0x65, 0x72, 0x6F, 0xB0, 0x05, 0x90, 0x08,
            0x6E, 0x01, 0x69, 0x73, 0x69, 0x20, 0x73, 0x63, 0x65, 0x6C, 0x8D, 0xE0, 0x0B, 0xE2, 0x01, 0x62,
            0x69, 0x62, 0xD0, 0x0C, 0xE0, 0x04, 0x76, 0x05, 0x97, 0x05, 0x76, 0x69, 0x74, 0x61, 0x65, 0xB0,
            0x0A, 0x67, 0x08, 0x11, 0x07, 0x4E, 0x75, 0x6E, 0x63, 0xA6, 0x12, 0x20, 0x74, 0x01, 0x69, 0x6E,
            0x63, 0x69, 0x64, 0x75, 0x6E, 0x74, 0x28, 0x90, 0x04, 0x62, 0x68, 0xFA, 0x08, 0x65, 0xF0, 0x0B,
            0x6D, 0x6F, 0x88, 0x64, 0x70, 0x03, 0x78, 0x69, 0x6D, 0xD0, 0x0E, 0x67, 0x72, 0x18, 0x61, 0x76,
            0x69, 0x64, 0x10, 0x04, 0x51, 0x10, 0x61, 0x20, 0xBC, 0x61, 0x00, 0x09, 0x20, 0xB0, 0x0C, 0xF0,
            0x02, 0x71, 0x07, 0x94, 0x10, 0x61, 0x80, 0x6C, 0xD0, 0x00, 0x61, 0x6D, 0x20, 0x66, 0x61, 0x63,
            0xE2, 0x69, 0xC0, 0x0C, 0x11, 0x10, 0x50, 0x0A, 0x76, 0x65, 0x6C, 0xC4, 0x17, 0x10, 0x53, 0x75,
            0x73, 0x70, 0xF0, 0x09, 0x69, 0x73, 0x73, 0x21, 0x65, 0x20, 0x69, 0xD0, 0x17, 0x61, 0x70, 0x69,
            0x65, 0xE2, 0xF0, 0x01, 0x02, 0x0A, 0x54, 0x15, 0xC9, 0x1B, 0x64, 0x69, 0x67, 0x10, 0x0E, 0x80,
            0x73, 0xB0, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        [Test]
        public void NullSourceThrowsException()
        {
            var converter = new Reader();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        public void BadMagicThrowsException()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);
            data[0] = 0x00;

            using DataStream badHeaderDs = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(badHeaderDs);

            var converter = new Reader();
            _ = Assert.Throws<FormatException>(() => converter.Convert(binary));
        }

        [Test]
        public void BadPlatformIdThrowsException()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);
            data[4] = 0x00;

            using DataStream badHeaderDs = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(badHeaderDs);

            var converter = new Reader();
            _ = Assert.Throws<FormatException>(() => converter.Convert(binary));
        }

        [Test]
        public void ReadPar()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var converter = new Reader();
            NodeContainerFormat result = converter.Convert(binary);

            Assert.IsNotNull(result);
            Assert.AreEqual(".", result.Root.Name);
            Assert.IsTrue(result.Root.IsContainer);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual("dir1", result.Root.Children[0].Name);
            Assert.IsTrue(result.Root.Children[0].IsContainer);

            Node n = Navigator.SearchNode(result.Root, "/./dir1/test1.txt");
            ParFile file = n.GetFormatAs<ParFile>();

            Assert.IsNotNull(file);
            Assert.AreEqual(691, file.FileInfo.OriginalSize);
        }

        [Test]
        public void ReadParWithDecompression()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var converter = new Reader();
            var parameters = new ReaderParameters
            {
                DecompressFiles = true,
            };

            converter.Initialize(parameters);
            NodeContainerFormat result = converter.Convert(binary);

            Assert.IsNotNull(result);
            Assert.AreEqual(".", result.Root.Name);
            Assert.IsTrue(result.Root.IsContainer);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual("dir1", result.Root.Children[0].Name);
            Assert.IsTrue(result.Root.Children[0].IsContainer);

            Node n = Navigator.SearchNode(result.Root, "/./dir1/test1.txt");
            ParFile file = n.GetFormatAs<ParFile>();

            Assert.IsNotNull(file);
            Assert.IsFalse(file.FileInfo.IsCompressed());
            Assert.AreEqual(file.FileInfo.CompressedSize, file.FileInfo.OriginalSize);
        }

        [Test]
        public void ReadParLittleEndian()
        {
            byte[] data = new byte[_dataLittleEndian.Length];

            Array.Copy(_dataLittleEndian, data, _dataLittleEndian.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var converter = new Reader();
            NodeContainerFormat result = converter.Convert(binary);

            Assert.IsNotNull(result);
            Assert.AreEqual(".", result.Root.Name);
            Assert.IsTrue(result.Root.IsContainer);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual("dir1", result.Root.Children[0].Name);
            Assert.IsTrue(result.Root.Children[0].IsContainer);

            Node n = Navigator.SearchNode(result.Root, "/./dir1/test1.txt");
            ParFile file = n.GetFormatAs<ParFile>();

            Assert.IsNotNull(file);
            Assert.AreEqual(691, file.FileInfo.OriginalSize);
        }

        [Test]
        public void FixesNullDirectoryName()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);
            data[0x20] = 0x00;

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var converter = new Reader();
            NodeContainerFormat result = converter.Convert(binary);

            Assert.IsNotNull(result);
            Assert.AreEqual(".", result.Root.Name);
            Assert.IsTrue(result.Root.IsContainer);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual("dir1", result.Root.Children[0].Name);
            Assert.IsTrue(result.Root.Children[0].IsContainer);

            Node n = Navigator.SearchNode(result.Root, "/./dir1/test1.txt");
            ParFile file = n.GetFormatAs<ParFile>();

            Assert.IsNotNull(file);
            Assert.AreEqual(691, file.FileInfo.OriginalSize);
        }

        [Test]
        public void WritingNullSourceThrowsException()
        {
            var converter = new Writer();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));
        }

        [Test]
        [Ignore("Creates 4GB temp file.")]
        public void WritingBigFilesThrowsException()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            NodeContainerFormat nodeContainer = reader.Convert(binary);

            var writer = new Writer();
            string path = Path.GetTempFileName();
            using (DataStream ds1 = DataStreamFactory.FromFile(path, FileOpenMode.ReadWrite))
            {
                ds1.SetLength(4294967296);
                ParFile badBinary = new ParFile(ds1);

                nodeContainer.Root.Add(new Node("4gb", badBinary));
                _ = Assert.Throws<FormatException>(() => writer.Convert(nodeContainer));
                badBinary.Dispose();
            }

            nodeContainer.Dispose();
            File.Delete(path);
        }

        [Test]
        public void WritePar()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            NodeContainerFormat nodeContainer = reader.Convert(binary);

            var writer = new Writer();
            BinaryFormat result = writer.Convert(nodeContainer);

            Assert.AreEqual(expected.Length, result.Stream.Length);
            Assert.IsTrue(expected.Compare(result.Stream));
        }

        [Test]
        public void WriteParWithDataSize()
        {
            byte[] data = new byte[_data.Length];

            Array.Copy(_data, data, _data.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            NodeContainerFormat nodeContainer = reader.Convert(binary);

            var writer = new Writer();
            var parameters = new WriterParameters
            {
                WriteDataSize = true,
            };

            writer.Initialize(parameters);
            BinaryFormat result = writer.Convert(nodeContainer);

            var dr = new DataReader(result.Stream)
            {
                Endianness = EndiannessMode.BigEndian,
            };

            result.Stream.Seek(0);
            FileHeader header = dr.Read<FileHeader>();

            Assert.IsTrue(header.Size != 0);
        }

        [Test]
        public void WriteParLittleEndian()
        {
            byte[] data = new byte[_dataLittleEndian.Length];

            Array.Copy(_dataLittleEndian, data, _dataLittleEndian.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            BinaryFormat binary = new BinaryFormat(ds);

            var reader = new Reader();
            NodeContainerFormat nodeContainer = reader.Convert(binary);

            var writer = new Writer();
            var parameters = new WriterParameters
            {
                Endianness = YarhlPlugin.YakuzaCommon.Enums.Endianness.LittleEndian,
            };

            writer.Initialize(parameters);
            BinaryFormat result = writer.Convert(nodeContainer);

            Assert.AreEqual(expected.Length, result.Stream.Length);
            Assert.IsTrue(expected.Compare(result.Stream));
        }
    }
}
