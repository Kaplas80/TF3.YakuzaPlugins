// Copyright (c) 2022 Kaplas
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

namespace TF3.Tests.Yakuza
{
    using System;
    using NUnit.Framework;
    using TF3.YarhlPlugin.YakuzaCommon.Converters.Sllz;
    using TF3.YarhlPlugin.YakuzaCommon.Enums;
    using Yarhl.IO;

    [TestFixture]
    public class SllzTests
    {
        private readonly byte[] _plain =
        {
            0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64, 0x6F, 0x6C, 0x6F,
            0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6D, 0x65, 0x74, 0x2C, 0x20, 0x63, 0x6F, 0x6E, 0x73,
            0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69,
            0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x2E, 0x20, 0x55, 0x74, 0x20, 0x66, 0x65, 0x72, 0x6D,
            0x65, 0x6E, 0x74, 0x75, 0x6D, 0x20, 0x6F, 0x72, 0x63, 0x69, 0x20, 0x65, 0x72, 0x61, 0x74, 0x2C,
            0x20, 0x76, 0x65, 0x6C, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x75, 0x6C, 0x61, 0x20, 0x76, 0x65,
            0x6C, 0x69, 0x74, 0x20, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x74, 0x75, 0x72, 0x20, 0x72, 0x75,
            0x74, 0x72, 0x75, 0x6D, 0x2E, 0x20, 0x56, 0x65, 0x73, 0x74, 0x69, 0x62, 0x75, 0x6C, 0x75, 0x6D,
            0x20, 0x61, 0x6E, 0x74, 0x65, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x70, 0x72, 0x69, 0x6D,
            0x69, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x6F,
            0x72, 0x63, 0x69, 0x20, 0x6C, 0x75, 0x63, 0x74, 0x75, 0x73, 0x20, 0x65, 0x74, 0x20, 0x75, 0x6C,
            0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x20, 0x70, 0x6F, 0x73, 0x75, 0x65, 0x72, 0x65, 0x20, 0x63,
            0x75, 0x62, 0x69, 0x6C, 0x69, 0x61, 0x20, 0x63, 0x75, 0x72, 0x61, 0x65, 0x3B, 0x20, 0x4E, 0x75,
            0x6C, 0x6C, 0x61, 0x6D, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6D, 0x65, 0x74, 0x20, 0x64, 0x69,
            0x61, 0x6D, 0x20, 0x64, 0x69, 0x61, 0x6D, 0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20, 0x76,
            0x65, 0x6C, 0x20, 0x6C, 0x6F, 0x62, 0x6F, 0x72, 0x74, 0x69, 0x73, 0x20, 0x74, 0x65, 0x6C, 0x6C,
            0x75, 0x73, 0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20, 0x76, 0x65, 0x6E, 0x65, 0x6E, 0x61,
            0x74, 0x69, 0x73, 0x20, 0x61, 0x63, 0x20, 0x73, 0x61, 0x70, 0x69, 0x65, 0x6E, 0x20, 0x6E, 0x6F,
            0x6E, 0x20, 0x61, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20,
            0x6D, 0x61, 0x73, 0x73, 0x61, 0x20, 0x6C, 0x6F, 0x72, 0x65, 0x6D, 0x2C, 0x20, 0x61, 0x6C, 0x69,
            0x71, 0x75, 0x61, 0x6D, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6E, 0x74, 0x65, 0x20, 0x65, 0x67, 0x65,
            0x74, 0x2C, 0x20, 0x66, 0x61, 0x63, 0x69, 0x6C, 0x69, 0x73, 0x69, 0x73, 0x20, 0x66, 0x65, 0x75,
            0x67, 0x69, 0x61, 0x74, 0x20, 0x65, 0x78, 0x2E, 0x20, 0x50, 0x72, 0x6F, 0x69, 0x6E, 0x20, 0x61,
            0x20, 0x6F, 0x72, 0x63, 0x69, 0x20, 0x61, 0x20, 0x65, 0x78, 0x20, 0x65, 0x6C, 0x65, 0x69, 0x66,
            0x65, 0x6E, 0x64, 0x20, 0x70, 0x75, 0x6C, 0x76, 0x69, 0x6E, 0x61, 0x72, 0x2E, 0x20, 0x4D, 0x61,
            0x65, 0x63, 0x65, 0x6E, 0x61, 0x73, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74,
            0x75, 0x72, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x69,
            0x70, 0x73, 0x75, 0x6D, 0x2E, 0x20, 0x44, 0x6F, 0x6E, 0x65, 0x63, 0x20, 0x65, 0x75, 0x69, 0x73,
            0x6D, 0x6F, 0x64, 0x20, 0x64, 0x61, 0x70, 0x69, 0x62, 0x75, 0x73, 0x20, 0x71, 0x75, 0x61, 0x6D,
            0x20, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x20, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x61, 0x6D, 0x2E, 0x20,
            0x41, 0x6C, 0x69, 0x71, 0x75, 0x61, 0x6D, 0x20, 0x63, 0x6F, 0x6E, 0x67, 0x75, 0x65, 0x20, 0x63,
            0x6F, 0x6D, 0x6D, 0x6F, 0x64, 0x6F, 0x20, 0x66, 0x65, 0x75, 0x67, 0x69, 0x61, 0x74, 0x2E, 0x20,
            0x50, 0x68, 0x61, 0x73, 0x65, 0x6C, 0x6C, 0x75, 0x73, 0x20, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D,
            0x20, 0x75, 0x72, 0x6E, 0x61, 0x20, 0x74, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75, 0x6E, 0x74, 0x2C,
            0x20, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D, 0x20, 0x70, 0x75, 0x72, 0x75, 0x73, 0x20, 0x65, 0x67,
            0x65, 0x74, 0x2C, 0x20, 0x6D, 0x61, 0x6C, 0x65, 0x73, 0x75, 0x61, 0x64, 0x61, 0x20, 0x6E, 0x69,
            0x73, 0x69, 0x2E, 0x20, 0x50, 0x68, 0x61, 0x73, 0x65, 0x6C, 0x6C, 0x75, 0x73, 0x20, 0x69, 0x6E,
            0x20, 0x75, 0x72, 0x6E, 0x61, 0x20, 0x6E, 0x69, 0x62, 0x68, 0x2E, 0x20, 0x51, 0x75, 0x69, 0x73,
            0x71, 0x75, 0x65, 0x20, 0x61, 0x74, 0x20, 0x74, 0x6F, 0x72, 0x74, 0x6F, 0x72, 0x20, 0x61, 0x63,
            0x20, 0x64, 0x69, 0x61, 0x6D, 0x20, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D, 0x20, 0x6D, 0x61, 0x78,
            0x69, 0x6D, 0x75, 0x73, 0x20, 0x65, 0x67, 0x65, 0x74, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6D,
            0x65, 0x74, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x2E, 0x20, 0x41, 0x6C, 0x69, 0x71, 0x75, 0x61, 0x6D,
            0x20, 0x65, 0x74, 0x20, 0x66, 0x61, 0x75, 0x63, 0x69, 0x62, 0x75, 0x73, 0x20, 0x69, 0x70, 0x73,
            0x75, 0x6D, 0x2E,
        };

        private readonly byte[] _compressedV1 =
        {
            0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x01, 0x10, 0x00, 0xB3, 0x02, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00,
            0x00, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x00, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64, 0x6F,
            0x6C, 0x00, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x00, 0x6D, 0x65, 0x74, 0x2C, 0x20,
            0x63, 0x6F, 0x6E, 0x00, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x00, 0x20, 0x61, 0x64,
            0x69, 0x70, 0x69, 0x73, 0x63, 0x00, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x00, 0x2E,
            0x20, 0x55, 0x74, 0x20, 0x66, 0x65, 0x72, 0x10, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x03, 0x6F, 0x72,
            0x63, 0x08, 0x69, 0x20, 0x65, 0x72, 0x61, 0x40, 0x03, 0x76, 0x65, 0x81, 0x6C, 0x30, 0x00, 0x68,
            0x69, 0x63, 0x75, 0x6C, 0x61, 0x81, 0xC1, 0x00, 0xD0, 0x04, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
            0x00, 0x51, 0x04, 0x72, 0x75, 0x74, 0x72, 0x75, 0x6D, 0x2E, 0x00, 0x20, 0x56, 0x65, 0x73, 0x74,
            0x69, 0x62, 0x75, 0x84, 0x6C, 0xA0, 0x03, 0x61, 0x6E, 0x74, 0x65, 0xF4, 0x07, 0x70, 0x00, 0x72,
            0x69, 0x6D, 0x69, 0x73, 0x20, 0x69, 0x6E, 0x0A, 0x20, 0x66, 0x61, 0x75, 0x63, 0xF0, 0x01, 0x73,
            0x83, 0x05, 0x10, 0x6C, 0x75, 0x63, 0x74, 0xB0, 0x00, 0x65, 0x74, 0x20, 0x00, 0x75, 0x6C, 0x74,
            0x72, 0x69, 0x63, 0x65, 0x73, 0x00, 0x20, 0x70, 0x6F, 0x73, 0x75, 0x65, 0x72, 0x65, 0x01, 0x20,
            0x63, 0x75, 0x62, 0x69, 0x6C, 0x69, 0x61, 0x00, 0x70, 0x00, 0x72, 0x61, 0x65, 0x3B, 0x20, 0x4E,
            0x75, 0x11, 0x6C, 0x6C, 0x61, 0x6D, 0x26, 0x0C, 0x20, 0x64, 0x69, 0x83, 0xD0, 0x00, 0x41, 0x00,
            0x2E, 0x20, 0x50, 0x72, 0x6F, 0x80, 0x05, 0x02, 0xD1, 0x09, 0x6C, 0x6F, 0x62, 0x6F, 0x72, 0x74,
            0x80, 0x06, 0x04, 0x74, 0x65, 0x6C, 0x6C, 0x75, 0x73, 0xA7, 0x01, 0x6E, 0x20, 0x65, 0x6E, 0x61,
            0x71, 0x01, 0x61, 0x63, 0x20, 0x73, 0x00, 0x61, 0x70, 0x69, 0x65, 0x6E, 0x20, 0x6E, 0x6F, 0x44,
            0x6E, 0x20, 0xA0, 0x08, 0x74, 0x6F, 0x72, 0x55, 0x02, 0x6D, 0x18, 0x61, 0x73, 0x73, 0x61, 0x20,
            0x04, 0x50, 0x13, 0x2C, 0x20, 0x0B, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x10, 0x06, 0x61, 0xE0, 0x06,
            0x22, 0x61, 0x0C, 0x65, 0x67, 0x61, 0x13, 0x66, 0x61, 0x63, 0x30, 0x09, 0x82, 0x73, 0x80, 0x04,
            0x66, 0x65, 0x75, 0x67, 0x69, 0xC0, 0x01, 0x56, 0x65, 0x78, 0xE5, 0x03, 0x61, 0x13, 0x0D, 0x61,
            0x20, 0x01, 0x70, 0x14, 0x00, 0x65, 0x69, 0x66, 0x65, 0x6E, 0x64, 0x20, 0x70, 0x04, 0x75, 0x6C,
            0x76, 0x69, 0x6E, 0x61, 0x30, 0x06, 0x4D, 0x2E, 0x61, 0x65, 0x63, 0x40, 0x08, 0x73, 0xAA, 0x17,
            0xB9, 0x00, 0x82, 0x12, 0x00, 0x2E, 0x20, 0x44, 0x6F, 0x6E, 0x65, 0x63, 0x20, 0x00, 0x65, 0x75,
            0x69, 0x73, 0x6D, 0x6F, 0x64, 0x20, 0xEA, 0x64, 0xC0, 0x0A, 0xC1, 0x12, 0xB2, 0x08, 0x70, 0xB0,
            0x0D, 0x61, 0x95, 0x09, 0x32, 0x2E, 0x20, 0x41, 0x24, 0x0A, 0x40, 0x04, 0x67, 0x75, 0xF0, 0x12,
            0x58, 0x6F, 0x6D, 0x10, 0x03, 0x6F, 0x95, 0x09, 0x60, 0x09, 0x68, 0x61, 0xC0, 0x73, 0x62, 0x10,
            0xB4, 0x19, 0x20, 0x75, 0x72, 0x6E, 0x61, 0x00, 0x20, 0x74, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x75,
            0xC6, 0x6E, 0xD0, 0x0C, 0x64, 0x01, 0x70, 0x75, 0x72, 0x21, 0x18, 0x02, 0x0E, 0x00, 0x6D, 0x61,
            0x6C, 0x65, 0x73, 0x75, 0x61, 0x64, 0x3C, 0x61, 0x20, 0x6E, 0x60, 0x0E, 0x39, 0x04, 0x10, 0x0E,
            0xF2, 0x03, 0x6E, 0x05, 0x69, 0x62, 0x68, 0x2E, 0x20, 0x51, 0xF0, 0x09, 0x71, 0xFC, 0x40, 0x07,
            0x10, 0x10, 0x10, 0x14, 0x20, 0x00, 0x91, 0x15, 0x22, 0x19, 0x44, 0x05, 0x6D, 0x1F, 0x61, 0x78,
            0x69, 0x6D, 0x64, 0x05, 0x47, 0x1B, 0xF3, 0x25, 0x85, 0x0B, 0xC0, 0x00, 0x01, 0xD6, 0x20, 0xD3,
            0x0F,
        };

        private readonly byte[] _compressedV2 =
        {
            0x53, 0x4C, 0x4C, 0x5A, 0x00, 0x02, 0x10, 0x00, 0xB3, 0x02, 0x00, 0x00, 0x89, 0x01, 0x00, 0x00,
            0x00, 0x01, 0x79, 0x02, 0xB2, 0x78, 0xDA, 0x55, 0x52, 0x4B, 0x6E, 0xDD, 0x30, 0x0C, 0xBC, 0x0A,
            0x0F, 0x10, 0xF8, 0x02, 0x59, 0x15, 0xE8, 0xB2, 0x0D, 0xDA, 0x45, 0xBB, 0xE7, 0x93, 0xE9, 0xF7,
            0x08, 0x48, 0x94, 0x23, 0x92, 0x41, 0x8E, 0xDF, 0xF1, 0x2F, 0x49, 0x01, 0x7F, 0x24, 0x52, 0x1C,
            0xCE, 0x0C, 0xF5, 0xA3, 0x0F, 0x69, 0xA4, 0xAB, 0x67, 0xA3, 0xB9, 0xD7, 0x3E, 0xC8, 0x35, 0x88,
            0x9B, 0xC4, 0x13, 0x95, 0x6E, 0x2E, 0x25, 0x24, 0x72, 0x10, 0xCF, 0xBA, 0xAA, 0x17, 0xB5, 0x3B,
            0x49, 0xD5, 0x98, 0xE8, 0x4F, 0xD0, 0x22, 0xA3, 0x89, 0x05, 0x2A, 0xFB, 0x28, 0x4A, 0x32, 0x18,
            0x45, 0x6F, 0x52, 0xF1, 0x3E, 0xB4, 0x64, 0xE5, 0x6D, 0x03, 0x34, 0x59, 0x16, 0x2D, 0xBA, 0xA1,
            0x8C, 0x8C, 0x91, 0x6D, 0xA2, 0xBF, 0xE2, 0xA1, 0xB7, 0xAC, 0x28, 0x65, 0x0B, 0x39, 0xFB, 0xAF,
            0x43, 0x9B, 0x3A, 0xA9, 0xD1, 0xC2, 0x59, 0x90, 0xF7, 0x03, 0xB8, 0x66, 0x09, 0xAC, 0x25, 0x28,
            0x6B, 0x0C, 0x2D, 0xE2, 0xB4, 0x76, 0x4F, 0x19, 0x42, 0x25, 0x6F, 0x5A, 0x95, 0xF1, 0x1F, 0x2C,
            0xCF, 0xF4, 0x92, 0xB5, 0x72, 0xFB, 0x90, 0x40, 0xB3, 0x62, 0xB7, 0x7D, 0x26, 0xFA, 0x35, 0x3A,
            0x80, 0x37, 0x76, 0xB5, 0xDF, 0xFA, 0x08, 0x34, 0x0A, 0xA9, 0x35, 0xFD, 0x33, 0x65, 0x62, 0xBC,
            0xC5, 0xB9, 0x90, 0xF3, 0xAA, 0x62, 0x64, 0xDD, 0x08, 0x54, 0xA2, 0x8F, 0xEB, 0x54, 0x63, 0x77,
            0x06, 0x04, 0x5C, 0x7B, 0x22, 0xAE, 0xFA, 0x9A, 0xE8, 0xC0, 0x71, 0xC8, 0x90, 0xFB, 0x66, 0xDB,
            0xC2, 0x05, 0x9C, 0x1C, 0x40, 0x8B, 0xE4, 0x5D, 0x91, 0x94, 0xF7, 0xAB, 0x9C, 0x0F, 0x45, 0x8C,
            0x10, 0x7C, 0x14, 0x5D, 0xC4, 0x66, 0x5A, 0xB3, 0xBE, 0xA9, 0x31, 0x7A, 0xFC, 0x64, 0x29, 0x20,
            0xE1, 0xFF, 0x59, 0xFF, 0x75, 0xBD, 0x1B, 0x35, 0xD1, 0xF7, 0x6E, 0x52, 0x48, 0x52, 0xBD, 0xF5,
            0x99, 0x66, 0x90, 0xDD, 0xCC, 0xDA, 0xB9, 0xAC, 0xD0, 0xC6, 0x17, 0xB3, 0x89, 0xBE, 0x9D, 0x14,
            0x01, 0x72, 0x4F, 0xF8, 0xD5, 0x1B, 0x2A, 0xFA, 0xC5, 0x0C, 0xB4, 0x1E, 0xEC, 0xBB, 0x0D, 0xE7,
            0x6C, 0x28, 0x87, 0x31, 0x85, 0x5A, 0xD1, 0x39, 0x0D, 0x6A, 0xCE, 0xF0, 0x9A, 0x63, 0x1B, 0xC1,
            0x2E, 0xB0, 0x71, 0x15, 0x4F, 0x9E, 0x99, 0x0C, 0x32, 0xBF, 0x62, 0x40, 0xE1, 0x5E, 0x6F, 0x7A,
            0x7B, 0x4C, 0xF4, 0x1B, 0xFC, 0x5E, 0xD1, 0x14, 0x0E, 0xC0, 0x41, 0x3C, 0x9B, 0xB3, 0xFB, 0x48,
            0x4E, 0xD0, 0xC6, 0xEF, 0xDA, 0x4E, 0xD8, 0xCF, 0xA1, 0x1D, 0xF7, 0xEB, 0x22, 0x8E, 0xC0, 0xC7,
            0x6D, 0x38, 0xD4, 0xFF, 0x03, 0x8D, 0x3E, 0xFE, 0x5C,
        };

        [Test]
        public void CompressNullSourceThrowsException()
        {
            var converter = new Compress();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));

            var converterStandard = new CompressStandard();
            _ = Assert.Throws<ArgumentNullException>(() => converterStandard.Convert(null));

            var converterZlib = new CompressZlib();
            _ = Assert.Throws<ArgumentNullException>(() => converterZlib.Convert(null));
        }

        [Test]
        public void DecompressNullSourceThrowsException()
        {
            var converter = new Decompress();
            _ = Assert.Throws<ArgumentNullException>(() => converter.Convert(null));

            var converterStandard = new DecompressStandard();
            _ = Assert.Throws<ArgumentNullException>(() => converterStandard.Convert(null));

            var converterZlib = new DecompressZlib();
            _ = Assert.Throws<ArgumentNullException>(() => converterZlib.Convert(null));
        }

        [Test]
        public void UnknownCompressionTypeThrowsException()
        {
            byte[] data = new byte[_plain.Length];

            Array.Copy(_plain, data, _plain.Length);

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new BinaryFormat(ds);

            var converter = new Compress();
            var parameters = new CompressorParameters
            {
                CompressionType = (CompressionType)0x5,
            };
            converter.Initialize(parameters);

            _ = Assert.Throws<FormatException>(() => converter.Convert(binary));
        }

        [Test]
        public void CompressNone()
        {
            byte[] data = new byte[_plain.Length];

            Array.Copy(_plain, data, _plain.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new BinaryFormat(ds);

            var converter = new Compress();
            var parameters = new CompressorParameters
            {
                CompressionType = CompressionType.None,
            };
            converter.Initialize(parameters);

            YarhlPlugin.YakuzaCommon.Formats.ParFile compressed = converter.Convert(binary);
            Assert.AreEqual(data.Length, compressed.Stream.Length);
            Assert.IsTrue(expected.Compare(compressed.Stream));
        }

        [Test]
        public void CompressStandard()
        {
            byte[] data = new byte[_plain.Length];

            Array.Copy(_plain, data, _plain.Length);

            using DataStream expected = DataStreamFactory.FromArray(_compressedV1, 0, _compressedV1.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new BinaryFormat(ds);

            var converter = new Compress();
            var parameters = new CompressorParameters
            {
                CompressionType = CompressionType.Standard,
            };
            converter.Initialize(parameters);

            YarhlPlugin.YakuzaCommon.Formats.ParFile compressed = converter.Convert(binary);
            Assert.AreEqual(_compressedV1.Length, compressed.Stream.Length);
            Assert.IsTrue(expected.Compare(compressed.Stream));
        }

        [Test]
        public void UncompressibleStandardDataReturnsOriginalData()
        {
            byte[] data = new byte[_compressedV1.Length];

            Array.Copy(_compressedV1, data, _compressedV1.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new BinaryFormat(ds);

            var converter = new Compress();
            var parameters = new CompressorParameters
            {
                CompressionType = CompressionType.Standard,
            };
            converter.Initialize(parameters);

            YarhlPlugin.YakuzaCommon.Formats.ParFile compressed = converter.Convert(binary);
            Assert.AreEqual(data.Length, compressed.Stream.Length);
            Assert.IsTrue(expected.Compare(compressed.Stream));
        }

        [TestCase(CompressionType.Standard)]
        [TestCase(CompressionType.Zlib)]
        public void ShortDataReturnsOriginalData(CompressionType type)
        {
            byte[] data = { 0x00, 0x01 };

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new BinaryFormat(ds);

            var converter = new Compress();
            var parameters = new CompressorParameters
            {
                CompressionType = type,
            };
            converter.Initialize(parameters);

            YarhlPlugin.YakuzaCommon.Formats.ParFile compressed = converter.Convert(binary);
            Assert.AreEqual(data.Length, compressed.Stream.Length);
            Assert.IsTrue(expected.Compare(compressed.Stream));
        }

        [Test]
        public void CompressZlib()
        {
            byte[] data = new byte[_plain.Length];

            Array.Copy(_plain, data, _plain.Length);

            using DataStream expected = DataStreamFactory.FromArray(_compressedV2, 0, _compressedV2.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new BinaryFormat(ds);

            var converter = new Compress();
            var parameters = new CompressorParameters
            {
                CompressionType = CompressionType.Zlib,
            };
            converter.Initialize(parameters);

            YarhlPlugin.YakuzaCommon.Formats.ParFile compressed = converter.Convert(binary);
            Assert.AreEqual(_compressedV2.Length, compressed.Stream.Length);
            Assert.IsTrue(expected.Compare(compressed.Stream));
        }

        [Test]
        public void UncompressibleZlibDataReturnsOriginalData()
        {
            byte[] data = new byte[_compressedV2.Length];

            Array.Copy(_compressedV2, data, _compressedV2.Length);

            using DataStream expected = DataStreamFactory.FromArray(data, 0, data.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new BinaryFormat(ds);

            var converter = new Compress();
            var parameters = new CompressorParameters
            {
                CompressionType = CompressionType.Zlib,
            };
            converter.Initialize(parameters);

            YarhlPlugin.YakuzaCommon.Formats.ParFile compressed = converter.Convert(binary);
            Assert.AreEqual(data.Length, compressed.Stream.Length);
            Assert.IsTrue(expected.Compare(compressed.Stream));
        }

        [Test]
        public void DecompressDetectsStandardCompression()
        {
            byte[] data = new byte[_compressedV1.Length];

            Array.Copy(_compressedV1, data, _compressedV1.Length);

            using DataStream expected = DataStreamFactory.FromArray(_plain, 0, _plain.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new YarhlPlugin.YakuzaCommon.Formats.ParFile(ds);

            var converter = new Decompress();
            YarhlPlugin.YakuzaCommon.Formats.ParFile uncompressed = converter.Convert(binary);
            Assert.AreEqual(_plain.Length, uncompressed.Stream.Length);
            Assert.IsTrue(expected.Compare(uncompressed.Stream));
        }

        [Test]
        public void DecompressDetectsZlibCompression()
        {
            byte[] data = new byte[_compressedV2.Length];

            Array.Copy(_compressedV2, data, _compressedV2.Length);

            using DataStream expected = DataStreamFactory.FromArray(_plain, 0, _plain.Length);
            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new YarhlPlugin.YakuzaCommon.Formats.ParFile(ds);

            var converter = new Decompress();
            YarhlPlugin.YakuzaCommon.Formats.ParFile uncompressed = converter.Convert(binary);
            Assert.AreEqual(_plain.Length, uncompressed.Stream.Length);
            Assert.IsTrue(expected.Compare(uncompressed.Stream));
        }

        [Test]
        public void UnknownDecompressionTypeThrowsException()
        {
            byte[] data = new byte[_compressedV2.Length];

            Array.Copy(_compressedV2, data, _compressedV2.Length);
            data[5] = 0x00;

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new YarhlPlugin.YakuzaCommon.Formats.ParFile(ds);

            var converter = new Decompress();
            _ = Assert.Throws<FormatException>(() => converter.Convert(binary));

            var converterStandard = new DecompressStandard();
            _ = Assert.Throws<FormatException>(() => converterStandard.Convert(binary));

            var converterZlib = new DecompressZlib();
            _ = Assert.Throws<FormatException>(() => converterZlib.Convert(binary));
        }

        [Test]
        public void UnknownMagicIdThrowsException()
        {
            byte[] data = new byte[_compressedV2.Length];

            Array.Copy(_compressedV2, data, _compressedV2.Length);
            data[0] = 0x00;

            using DataStream ds = DataStreamFactory.FromArray(data, 0, data.Length);
            var binary = new YarhlPlugin.YakuzaCommon.Formats.ParFile(ds);

            var converter = new Decompress();
            _ = Assert.Throws<FormatException>(() => converter.Convert(binary));

            var converterStandard = new DecompressStandard();
            _ = Assert.Throws<FormatException>(() => converterStandard.Convert(binary));

            var converterZlib = new DecompressZlib();
            _ = Assert.Throws<FormatException>(() => converterZlib.Convert(binary));
        }
    }
}
